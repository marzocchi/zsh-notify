# vim: set nowrap filetype=zsh:
#
# notify-if-background will exit with status 1 if the terminal application is
# not one for which we know how to query the "frontmost/background" status, and
# with status 2 if the terminal application or the current shell tab/window is
# active. See README.md for configuration options.
() {
    local term_id type message notifier

    type=$1
    time_elapsed="$2"
    message=$(<&0)

    # Find a "term_id", a string that will be used later to dispatch different
    # commands to determine whether the terminal application is active or in
    # background.
    function find-current-term-id {
        local resources_dir
        zstyle -s ':notify:' resources-dir resources_dir

        if [[ "$TERM_PROGRAM" == 'iTerm.app' ]]; then
            echo iterm2
        elif [[ "$TERM_PROGRAM" == 'Apple_Terminal' ]]; then
            echo apple-terminal
        elif [[ "$DISPLAY" != '' ]] && which xdotool > /dev/null 2>&1; then
            echo xdotool
        else
            return 1
        fi
    }

    # Exit with 0 if inside a TMUX pane
    function is-inside-tmux {
        if [[ -z "$TMUX" ]]; then
            return 1
        else
            return 0
        fi
    }

    # Find the TTY for the current shell.
    function find-current-tty {
        if is-inside-tmux; then
          tmux display-message -p '#{client_tty}'
        else
          echo $TTY
        fi
    }

    # Get the active TMUX pane ID, comparable with $TMUX_PANE
    function find-tmux-pane {
        if is-inside-tmux; then
            tmux list-windows -F '#{window_active} #{pane_id}' | grep -i '^1' | awk '{ print $2 }'
        else
            return 1
        fi
    }

    # Exit with 0 if given TMUX pane is the active one.
    function is-tmux-pane-active {
        local pane
        pane=$1

        if [[ "$TMUX_PANE" == "$pane" ]]; then
            return 0
        fi

        return 1
    }

    # Exit with 0 if the terminal window/tab is active; exit with 1 if not, or
    # if the terminal is
    function is-terminal-window-active {
        local term_id

        term_id=$1

        case "$term_id" in
            "iterm2"|"apple-terminal")
                local current_tty resources_dir

                zstyle -s ':notify:' resources-dir resources_dir
                current_tty=$(find-current-tty)

                if [[ "true" == $(osascript "$resources_dir"/is-"$term_id"-active.applescript "$current_tty") ]]; then
                    return 0
                fi
            ;;
            "xdotool")
                local active_wid wid

                active_wid=$(xdotool getactivewindow)

                zstyle -s ':notify:' window-pid wid \
                    || zstyle -s ':notify:' parent-pid wid
  
                if [[ "$active_wid" == "$wid" ]]; then
                    return 0
                fi
            ;;
        esac
        return 1
    }

    # Detect if the terminal application is in background, also accounting
    # for TMUX if needed, exiting with status 1 if it's active.
    function is-in-background {
        local term_id

        term_id=$1

        if is-terminal-window-active "$term_id"; then
            if is-inside-tmux; then
                local tmux_pane

                tmux_pane=$(find-tmux-pane)

                if is-tmux-pane-active "$tmux_pane"; then
                    return 1
                else
                    return 0
                fi
            fi
            return 1
        fi

        return 0
    }


    function notifier {
        local notification_title message type
        local -A titles
        local -A vars

        titles=(error "#fail" success "#win")
        type=$1
        time_elapsed=$2
        vars=(time_elapsed "$time_elapsed")

        message=$(<&0)

        function replace_vars {
          local text

          text="$1"

          for k in "${(@k)vars}"; do
            v=$vars[$k]
            text=$(echo "$text" | sed "s/#{$k}/$v/" )
          done

          echo $text
        }

        zstyle -s ':notify:' "$type"-title notification_title \
            || notification_title="$titles[$type]"

        notification_title=$(replace_vars "$notification_title")

        zstyle -s ':notify:' "$type"-sound notification_sound
        zstyle -s ':notify:' "$type"-icon icon

        function notifier-mac {
            local app_id app_id_option sound_option

            if [[ "$TERM_PROGRAM" == 'iTerm.app' ]]; then
                app_id="com.googlecode.iterm2"
            elif [[ "$TERM_PROGRAM" == 'Apple_Terminal' ]]; then
                app_id="com.apple.terminal"
            fi

            if [[ ! -z "$app_id" ]]; then
                app_id_option="-activate $app_id"
            fi

            if [[ ! -z "$notification_sound" ]]; then
                sound_option="-sound $notification_sound"
            fi

            echo "$message" | terminal-notifier ${=app_id_option} ${=sound_option} -appIcon "$icon" -title "$notification_title" > /dev/null 2>&1

            if zstyle -t ':notify:' activate-terminal; then
                echo tell app id \"$app_id\" to activate | osascript 1>/dev/null
            fi
        }

        function notifier-linux {
            notify-send -i "$icon" "$notification_title" "$message"

            function play-sound {
              if which paplay > /dev/null 2>&1; then
                paplay "$1"
              elif which aplay > /dev/null 2>&1; then
                aplay "$1"
              elif which ossplay > /dev/null 2>&1; then
                ossplay "$1"
              else
                echo "Could not find a sound file player." >&2
                return 1
              fi
            }

            if [[ ! -z "$notification_sound" ]]; then
                if [[ -a "$notification_sound" ]]; then
                    play-sound "$notification_sound"
                else
                    echo "File $notification_sound not found." >&2
                fi
            fi

            if which wmctrl > /dev/null 2>&1; then
                local parent_pid

                zstyle -s ':notify:' parent-pid parent_pid

                if zstyle -t ':notify:' activate-terminal; then
                    wmctrl -ia $(wmctrl -lp | awk -vpid=$parent_pid '$3==pid {print $1; exit}')
                elif ! (zstyle -t ':notify:' disable-urgent); then
                    wmctrl -i -r $(wmctrl -lp | awk -vpid=$parent_pid '$3==pid {print $1; exit}') -b add,demands_attention
                fi
            fi
        }

        if which terminal-notifier > /dev/null 2>&1; then
            notifier-mac
        elif which notify-send > /dev/null 2>&1; then
            notifier-linux
        else
            echo "No notifier program found." >&2
            return 1
        fi
    }

    zstyle -s ':notify:' error-log error_log \
      || error_log=/dev/stderr

    (
      term_id=$(find-current-term-id) \
          || return 1

      is-in-background "$term_id" \
          || return 2

      zstyle -s ':notify:' notifier notifier \
          || notifier=notifier

      echo "$message" | "$notifier" "$type" "$time_elapsed"
    ) 2> "$error_log"

} "$1" "$2"
