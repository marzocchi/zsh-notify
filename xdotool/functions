# vim: set nowrap filetype=zsh:
#
# is-terminal-active checks if the current window (identified by the window-id
# stored in zstyle) is active, and exits with 1 if not; it does support TMUX,
# but doesn't support tabs.
is-terminal-active() {
    local plugin_dir

    zstyle -s ':notify:' plugin-dir plugin_dir
    source "$plugin_dir"/lib

    function is-terminal-window-active {
        local active_wid wid

        active_wid=$(xdotool getwindowfocus)

        zstyle -s ':notify:' window-id wid

        if [[ "$active_wid" == "$wid" ]]; then
            return 0
        fi

        return 1
    }

    if is-terminal-window-active; then
        if is-inside-tmux; then
            is-current-tmux-pane-active
            return $?
        fi
    else
        return $?
    fi
}

function zsh-notify() {
    local message type time_elapsed title icon

    if ! command -v notify-send > /dev/null 2>&1; then
        echo cannot find notify-send in \$PATH 1>&2
        return 1
    fi

    if [[ $# -lt 2 ]]; then
        echo usage: notifier TYPE TIME_ELAPSED 1>&2
        return 1
    fi

    zstyle -s ':notify:' plugin-dir plugin_dir
    source "$plugin_dir"/lib

    type="$1"
    time_elapsed="$(format-time "$2")"
    message=$(<&0)

    zstyle -s ':notify:' "$type"-sound notification_sound
    zstyle -s ':notify:' "$type"-icon icon
    zstyle -s ':notify:' app-name app_name
    zstyle -s ':notify:' expire-time expire_time

    title=$(notification-title "$type" time_elapsed "$time_elapsed")

    if [[ -n "$icon" ]]; then
        icon_option="-i $icon"
    fi

    if [[ -z "$app_name" ]]; then
            app_name="${message%% *}"
            message="${message#* }"
    fi

    notify-send -a "${=app_name}" -t $expire_time ${=icon_option} "$title" -- "$message"

    function play-sound {
        if command -v paplay > /dev/null 2>&1; then
            paplay "$1"
        elif command -v aplay > /dev/null 2>&1; then
            aplay "$1"
        elif command -v ossplay > /dev/null 2>&1; then
            ossplay "$1"
        else
            echo "could not find a sound file player." >&2
            return 1
        fi
    }

    if [[ -n "$notification_sound" ]]; then
        if [[ -a "$notification_sound" ]]; then
            play-sound "$notification_sound"
        else
            echo "file $notification_sound not found." >&2
        fi
    fi

    if command -v wmctrl > /dev/null 2>&1; then
        local wid

        zstyle -s ':notify:' window-id wid

        if zstyle -t ':notify:' activate-terminal; then
            wmctrl -ia $wid
        elif ! (zstyle -t ':notify:' disable-urgent); then
            wmctrl -i -r $wid -b add,demands_attention
        fi
    fi
}

# NOTE: Using the initial `WINDOWID` value can result in false negatives with
# tmux, i.e. it can return that the terminal window is inactive even when it's
# active. Steps to reproduce:
# 1. Open terminal window with tmux session S
# 2. Open another terminal window and attach to session S
# 3. Type in the original terminal the command:
#    `zstyle ':notify:*' command-complete-timeout 1; sleep 2`
#
# Why does this happen?
# When the new terminal window is opened, tmux updates the session environment
# variable `WINDOWID` to match the new window. When a new shell is started in
# the session (in any terminal window), it will inherit this value. So now the
# WINDOWID will only be correct for new shells in the new window, or for
# existing shells in the previous window, but in all other cases it will be
# incorrect.
function store-window-id() {
    if ! (zstyle -t ':notify:' check-focus); then
        return
    fi

    local always_check
    zstyle -b ':notify:' always-check-active-window always_check || true

    # some linux terminals such as gnome-terminal don't set the WINDOWID, so we
    # check if it's empty. If it's empty or the user explicitly requests it (see
    # the function documentation for details on why this is needed), we capture
    # the ID of the window that is _now_ focused. This should be the window of
    # the terminal used to type the command, as this function is run as a prexec
    # hook.
    if [[ -z "$WINDOWID" || "$always_check" == 'yes' ]]; then
        zstyle ':notify:*' window-id "$(xdotool getwindowfocus)"
    else
        zstyle ':notify:*' window-id "$WINDOWID"
    fi
}

autoload -U add-zsh-hook
add-zsh-hook preexec store-window-id
